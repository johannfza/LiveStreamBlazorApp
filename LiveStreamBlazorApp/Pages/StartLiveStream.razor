@page "/"

<div class="container">
    <div class="row">
        <h3>@Title</h3>
    </div>
    <div>
        <div>
            <NotificationPanel />
        </div>
        <div class="row">
            <div class="col-md-8">
                @*<-- --> Live Stream Form </-->*@
                <div class="outer-container">
                    @*<-- --> Video PLayer </-->*@

                    @if (BroadcastState == BroadcastState.Ended)
                    {
                        <div class="inner-container">
                            <div class="video-overlay">
                                <p>RECORDED</p>
                            </div>
                            <div>
                                <video id="vidSave" controls></video>
                            </div>
                        </div>
                    }

                    @if (BroadcastState == BroadcastState.Preview || BroadcastState == BroadcastState.Live)
                    {

                        <div class="inner-container">

                            @if (BroadcastState == BroadcastState.Live)
                            {
                                <div class="video-overlay">
                                    <img src="images/live.png" width="40" class="logo blinking">
                                </div>
                            }
                            @if (BroadcastState == BroadcastState.Preview)
                            {
                                <div class="video-overlay">
                                    <p>PREVIEW</p>
                                </div>
                            }

                            <div>
                                <video id="vidInput" muted>
                                    <source id="video_source" />
                                </video>
                            </div>

                        </div>

                    }

                </div>

                <div>
                    @*<-- --> Form</-->*@
                    @if (BroadcastState == BroadcastState.Live)
                    {
                        <div>
                            <button class="btn btn-block btn-outline-secondary" @onclick="@EndStreamAsync">End Live</button>
                        </div>
                    }
                    @if (BroadcastState == BroadcastState.Ended)
                    {
                        <div>
                            <button class="btn btn-block btn-outline-secondary" @onclick="@DownloadVideo">Download</button>
                        </div>
                    }


                    <EditForm Model="@liveStream" OnValidSubmit="@SubmitLiveStream">

                        @if (BroadcastState == BroadcastState.Preview)
                        {

                            <div>
                                <button class="btn btn-block btn-danger" type="submit">Start Live</button>
                            </div>

                        }
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-group">
                            <label>Title</label>
                            <InputText class="form-control" @bind-Value="liveStream.Title" placeholder="Title of stream" disabled="@IsDisabled" />
                            <ValidationMessage For="@(() => liveStream.Title)" />
                        </div>
                        <div class="form-group">
                            <label>Description</label>
                            <InputTextArea class="form-control" @bind-Value="liveStream.Description" placeholder="Description" disabled="@IsDisabled" />
                            <ValidationMessage For="@(() => liveStream.Description)" />
                        </div>

                        @if (AdminShow)
                        {

                            <div id="admininfo">
                                <div class="form-group">
                                    <label>RTMP Url</label>
                                    <div class="input-group mb-3">
                                        <InputText class="form-control" id="StreamUrl" @bind-Value="liveStream.Url" disabled="@IsDisabled" />
                                        <div class="input-group-append">
                                            <button class="btn btn-outline-secondary" type="button" @onclick="@(e => CopyToClipboard(e, "StreamUrl"))">Copy</button>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label>Stream Key</label>
                                    <small class="form-text text-muted">Stream key is dynamic.</small>
                                    <div class="input-group">
                                        <InputText class="form-control" id="StreamKey" @bind-Value="liveStream.StreamKey" @oninput="@UpdateStreamUrl" disabled="@IsDisabled" />
                                        <div class="form-group input-group-append">
                                            <button class="btn btn-outline-secondary" type="button" @onclick="@(e => CopyToClipboard(e, "StreamKey"))">Copy</button>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label>Live Stream Url</label>
                                    <small class="form-text text-muted">After it's published</small>
                                    <div class="input-group">
                                        <InputText class="form-control" id="@liveStream.Url" @bind-Value="liveStream.Url" readonly />
                                        <div class="input-group-append">
                                            <button class="btn btn-outline-secondary" type="button" @onclick="@(e => CopyToClipboard(e, liveStream.Url))">Copy</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                        <div>
                            <button class="btn btn-info" type="button" @onclick="@AdminToggle">@showDetailsButtonText</button>
                        </div>
                    </EditForm>
                </div>
            </div>

            <div class="col-md-4">
                <Chat roomName="@liveStream.StreamKey"></Chat>
            </div>
        </div>
    </div>
</div>



@code {
    public static readonly string TAG = "StartLiveStream: ";

    //Connnections
    public static readonly HttpConnectionAttributes STREAMSERVER = StreamConnectionManager.STREAMSERVER;

    public readonly string INGESTURL = $"rtmp://localhost:1935/live";

    public readonly string WSSERVER = $"wss://{STREAMSERVER.HostIP}/rtmp/";

    //Page State
    protected BroadcastState BroadcastState { get; set; } = BroadcastState.Preview;

    //Tools
    [Inject]
    protected HttpClient Http { get; set; }
    [Inject]
    protected IJSRuntime JSRuntime { get; set; }

    private LiveStreamNotificationClient client = null;

    //Page Attributes
    public string Title = "LiveStream";
    public LiveStream liveStream = new LiveStream();

    public string BlobURL = "";

    public string showDetailsButtonText = "Show RTMP Details";

    public bool firstRenderAfterEnded = true;

    //UI_Logic
    protected bool IsDisabled { get; set; } = false;
    protected bool AdminShow { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine(TAG + "OnInitializedAsync: " + STREAMSERVER.GetURL());
        await base.OnInitializedAsync();
        //liveStream.StreamKey = Guid.NewGuid().ToString();
        liveStream.StreamKey = "test";
        liveStream.Url = $"https://{STREAMSERVER.HostIP}/{STREAMSERVER.Route}/watch/{liveStream.StreamKey}/index.m3u8";
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //await JSRuntime.InvokeVoidAsync("videoplayer.previewPlayer", "previewPlayer");
            await InitLiveStreamNotificationAsync();
            await JSRuntime.InvokeVoidAsync("oninitstartlivestreampage");
            StateHasChanged();
        }

        if (BroadcastState == BroadcastState.Ended && firstRenderAfterEnded)
        {
            await LoadRecordedeVideoAsync();
            firstRenderAfterEnded = false;
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    protected void AdminToggle()
    {
        AdminShow = !AdminShow;
        showDetailsButtonText = showDetailsButtonText == "Show RTMP Details" ? "Hide" : "Show RTMP Details";
        StateHasChanged();
    }

    protected async Task SubmitLiveStream()
    {
        BroadcastState = BroadcastState.Live;
        IsDisabled = true;
        liveStream.DatePublished = DateTime.UtcNow.ToLocalTime().ToString();
        string websocketserver = WSSERVER;
        string streamendpoint = $"{INGESTURL}/{liveStream.StreamKey}";

        Console.WriteLine(TAG + $"SubmitLiveStream: StreamingEndpoint = {streamendpoint}");
        await JSRuntime.InvokeVoidAsync("startlivestream",streamendpoint, websocketserver);
        var response = await Http.PostJsonAsync<LiveStream>("https://localhost:5001/api/livestreams", liveStream);
        await client.LiveStreamStartedAsync(response);
        Debug.WriteLine(response.ToString());
        StateHasChanged();

    }


    public async Task InitLiveStreamNotificationAsync()
    {
        client = new LiveStreamNotificationClient();
        client.LiveStreamEvent += LiveStreamEvent;
        await client.StartAsync();
    }


    protected void LiveStreamEvent(object sender, LiveStreamEventArgs e)
    {
        if (e.isLive)
        {
            Console.WriteLine(TAG + $"{e.LiveStream.Title} is Live");
        }
        else
        {
            Console.WriteLine(TAG + $"{e.LiveStream.Title} has Ended");
        }
    }

    protected async Task EndLiveStreamEvent()
    {
        System.Threading.Thread.Sleep(5000);
        await client.LiveStreamEndedAsync(liveStream);
        await client.StopAsync();
        client = null;
    }

    protected async Task EndStreamAsync()
    {
        BroadcastState = BroadcastState.Ended;
        await JSRuntime.InvokeVoidAsync("stoplivestream");
        await EndLiveStreamEvent();
        await Http.PostAsync("https://localhost:5001/api/notification?msg=The stream has ended", null);
    }

    protected async Task LoadRecordedeVideoAsync()
    {
        BlobURL = await JSRuntime.InvokeAsync<string>("getrecordingurl");
        Console.WriteLine(TAG + "LoadRecordedeVideoAsync: " + BlobURL);
    }

    protected async void Load()
    {
        await JSRuntime.InvokeVoidAsync("loadPlayer", "previewPlayer", liveStream.Url);
    }

    protected async Task CopyToClipboard(MouseEventArgs e, string id)
    {
        await JSRuntime.InvokeVoidAsync("copyToClipboard", id);
        //await JSRuntime.InvokeVoidAsync("createAlert","Copied to clipboard");
    }

    protected void UpdateStreamUrl(ChangeEventArgs args)
    {
        liveStream.StreamKey = args.Value.ToString();
        liveStream.Url = $"https://{STREAMSERVER.HostIP}/{STREAMSERVER.Route}/watch/{liveStream.StreamKey}/index.m3u8";
        StateHasChanged();
    }

    protected async Task DownloadVideo()
    {
        Debug.WriteLine(TAG + "DownloadVideo: Downloading");
        await JSRuntime.InvokeVoidAsync("download", BlobURL, $"{liveStream.Title}_{liveStream.StreamKey}.mp4");
    }

    [JSInvokable]
    public static Task<byte[]> OnLiveStreamDataAvailable()
    {

        var data = Task.FromResult(new byte[1000]);

        return data;
    }

    [JSInvokable]
    public static async Task RecordedData()
    {
        var data = await Task.FromResult(new byte[0]);
        Debug.WriteLine("From RecordedData: " + data.GetType());
        Debug.WriteLine("From RecordedData: " + data.Length);
    }
}
